name: Build
on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  image-build:
    name: Image build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false

    steps:
      # 1. Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Install Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      # 3. Fix file ownership
      - name: Fix repository permissions
        run: sudo chown -R "$(id -u):$(id -g)" .

      # 4. Install OS packages
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes \
            binutils debian-archive-keyring devscripts make \
            parted pipx qemu-utils build-essential debhelper-compat

      # 5. Setup Incus & mkosi
      - name: Setup Incus
        run: |
          curl https://pkgs.zabbly.com/get/incus-daily | sudo sh
          sudo chmod 666 /var/lib/incus/unix.socket
          incus admin init --auto

      - name: Install mkosi
        run: pipx install git+https://github.com/systemd/mkosi.git@v25.3

      # 6. Validate or regenerate certificate & key
      - name: Validate or Generate Secureboot Cert/Key
        id: certgen
        run: |
          set -e
          # Check provided secret
          if [ -n "${{ secrets.SB_CERT }}" ] && \
             printf '%s\n' "${{ secrets.SB_CERT }}" | openssl x509 -noout >/dev/null 2>&1
          then
            echo "Using provided SB_CERT & SB_KEY"
            # Preserve exact formatting
            cat << 'EOF' > mkosi.crt
${{ secrets.SB_CERT }}
EOF
            cat << 'EOF' > mkosi.key
${{ secrets.SB_KEY }}
EOF
          else
            echo "Generating new self-signed certificate and key"
            openssl req -x509 -newkey rsa:4096 \
              -keyout mkosi.key -out mkosi.crt \
              -days 365 -nodes -subj "/CN=IncusOS"
          fi

          chmod 644 mkosi.crt
          chmod 600 mkosi.key

          # Export for subsequent steps
          echo "MKOSI_CRT<<EOF" >> $GITHUB_ENV
          cat mkosi.crt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "MKOSI_KEY<<EOF" >> $GITHUB_ENV
          cat mkosi.key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 7. Build ISO images
      - name: Build Images
        env:
          PATH: "${{ runner.tool_cache }}/go/1.24.3/x64/bin:/root/.local/bin:${{ env.PATH }}"
        run: |
          # version file
          printf '#!/bin/sh\necho %s\n' "${GITHUB_REF_NAME}" > mkosi.version

          # Use regenerated cert/key from env if needed
          printf '%s\n' "${MKOSI_CRT}" > mkosi.crt
          printf '%s\n' "${MKOSI_KEY}" > mkosi.key

          make build-iso

      # 8. Collect and compress artifacts
      - name: Package Artifacts
        run: |
          mkdir -p upload
          mv mkosi.output/*.raw  upload/
          mv mkosi.output/*.iso  upload/
          mv mkosi.output/*.efi  upload/
          mv mkosi.output/*.usr* upload/
          cd upload
          for file in *; do gzip -9 "$file"; done

      # 9. Upload to GitHub Release
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: upload/*
          file_glob: true
          overwrite: true
          release_name: ${{ github.ref_name }}
