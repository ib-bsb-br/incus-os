name: Build

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  image-build:
    name: Image build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Fix repository permissions
        run: sudo chown -R "$(id -u):$(id -g)" .

      - name: Install dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install --yes \
            binutils coreutils debian-archive-keyring devscripts make \
            parted pipx qemu-utils build-essential debhelper-compat

      - name: Setup Incus
        run: |
          set -e
          curl https://pkgs.zabbly.com/get/incus-daily | sudo sh
          sudo chmod 666 /var/lib/incus/unix.socket
          incus admin init --auto

      - name: Install mkosi
        run: |
          set -e
          pipx install git+https://github.com/systemd/mkosi.git@v25.3

      - name: Validate or Generate Secureboot Cert/Key
        id: certgen
        run: |
          set -e
          if [ -n "${{ secrets.SB_CERT }}" ] && \
             printf '%s\n' "${{ secrets.SB_CERT }}" | openssl x509 -noout >/dev/null 2>&1; then
            printf '%s\n' "${{ secrets.SB_CERT }}" > mkosi.crt
            printf '%s\n' "${{ secrets.SB_KEY }}" > mkosi.key
          else
            openssl req -x509 -newkey rsa:4096 \
              -keyout mkosi.key -out mkosi.crt \
              -days 365 -nodes -subj "/CN=IncusOS"
          fi
          chmod 644 mkosi.crt
          chmod 600 mkosi.key
          echo "MKOSI_CRT<<EOF" >> $GITHUB_ENV
          cat mkosi.crt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "MKOSI_KEY<<EOF" >> $GITHUB_ENV
          cat mkosi.key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build Images
        run: |
          set -e
          printf '#!/bin/sh\necho %s\n' "${GITHUB_REF_NAME}" > mkosi.version
          chmod +x mkosi.version
          printf '%s\n' "${MKOSI_CRT}" > mkosi.crt
          printf '%s\n' "${MKOSI_KEY}" > mkosi.key
          make build-iso

      - name: Package Artifacts
        run: |
          set -e
          mkdir -p upload
          find mkosi.output -name '*.raw' -exec mv -t upload/ {} + 2>/dev/null || true
          find mkosi.output -name '*.iso' -exec mv -t upload/ {} + 2>/dev/null || true
          find mkosi.output -name '*.efi' -exec mv -t upload/ {} + 2>/dev/null || true
          find mkosi.output -name '*.usr*' -exec mv -t upload/ {} + 2>/dev/null || true
          cd upload
          if [ -n "$(ls -A)" ]; then
            for file in *; do gzip -9 "$file"; done
          fi

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: upload/*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref_name }}
